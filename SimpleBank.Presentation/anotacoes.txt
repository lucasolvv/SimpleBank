###Estrutura dividida em camadas

- Backend
	- proj.Application -> services e UseCases
		-- UseCases(Regras de negocio) usam services para atividades espeficicas e gerais
	- proj.Infra -> acesso a dados	
	- proj.Presentation -> API
	- Proj.Domain -> camda especifica para configurações de entidades e contratos => contrato = domain / implementação => infra 
- Shared
	proj.Communication -> classes usadas para as requisições (requests / responses)
	proj.Exceptions -> Projeto para tratamento de Exceptions


### Adicionando Injeção de dependencia dos serviços de cada projeto no program.cs 
1. Criar classe que faça extensao de IServiceCollection para poder adicionala como serviço na montagem do app.
2. enxergar os projetos (referencia) a partir pro projeto da API (presentation)

### lindando com a configuração do banco de dados.



### fluxo 

 - api recebe uma request -> o endpoint chama usecases -> usecases chama dominios ou services -> dominios chamam infra e tudo volta.

#### Regras de negocio: 
Para ambos tipos de usuário, precisamos de:
Nome Completo, CPF, e-mail e Senha. 
CPF/CNPJ e e-mails devem ser únicos no sistema. 
Sendo assim, seu sistema deve permitir apenas um cadastro com o mesmo CPF ou endereço de e-mail;

Usuários podem enviar dinheiro (efetuar transferência) para lojistas e entre usuários;

Lojistas só recebem transferências, não enviam dinheiro para ninguém;

Validar se o usuário tem saldo antes da transferência;

Antes de finalizar a transferência, deve-se consultar um serviço autorizador externo, use este mock https://util.devi.tools/api/v2/authorize para simular o serviço utilizando o verbo GET;

A operação de transferência deve ser uma transação (ou seja, revertida em qualquer caso de inconsistência) e o dinheiro deve voltar para a carteira do usuário que envia;

No recebimento de pagamento, o usuário ou lojista precisa receber notificação (envio de email, sms) enviada por um serviço de terceiro e eventualmente este serviço pode estar indisponível/instável. Use este mock https://util.devi.tools/api/v1/notify)) para simular o envio da notificação utilizando o verbo POST;

Este serviço deve ser RESTFul.